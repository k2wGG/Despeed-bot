"use strict";

const fetch = require("node-fetch");
const { HttpsProxyAgent } = require("https-proxy-agent");
const { SocksProxyAgent } = require("socks-proxy-agent");
const readline = require("readline");
const WebSocket = require("ws");
const crypto = require("crypto");
const fs = require("fs").promises;
const kleur = require("kleur");

// ASCII-–±–∞–Ω–Ω–µ—Ä (–ª–æ–≥–æ—Ç–∏–ø)
const banner = `
‚ñà‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  
‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà  
‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  
‚ñà‚ñà  ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà      ‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà  
‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà   ‚ñà‚ñà  

                TG: @nod3r
            DeSpeed Manager Bot
`;

// –ò–º—è —Ñ–∞–π–ª–∞, –≥–¥–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const CONFIG_FILE = "config.json";

// –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const config = {
  tokens: [],
  baseUrl: "https://app.despeed.net",
  checkInterval: 21600000, // –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ (6 —á–∞—Å–æ–≤)
  locationEnabled: false,
  uniqueIp: false,
  randomMode: false,      // –†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ (–µ—Å–ª–∏ true ‚Äì –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å–ª—É—á–∞–π–Ω—ã–µ)
  minRandomDelay: 180 * 60000, // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ (3 —á–∞—Å–∞)
  maxRandomDelay: 540 * 60000, // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ (9 —á–∞—Å–æ–≤)
  proxy: {
    enabled: false,
    urls: [],       // –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–∫—Å–∏ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ proxy.txt)
    timeout: 10000,
    maxRetries: 3,
    testUrl: "https://api.ipify.org?format=json"
  }
};

// –§–ª–∞–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞
let autoModeEnabled = false;

// –õ–æ–≥–≥–µ—Ä –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
const logger = {
  info: (msg, ...args) => console.log(kleur.blue("‚Ñπ"), kleur.white(msg), ...args),
  success: (msg, ...args) => console.log(kleur.green("‚úî"), kleur.white(msg), ...args),
  warning: (msg, ...args) => console.log(kleur.yellow("‚ö†"), kleur.white(msg), ...args),
  error: (msg, ...args) => console.log(kleur.red("‚úñ"), kleur.white(msg), ...args),
  speed: (msg, ...args) => console.log(kleur.cyan("‚ÜØ"), kleur.white(msg), ...args),
  time: (msg, ...args) => console.log(kleur.magenta("‚è∞"), kleur.white(msg), ...args),
  location: (msg, ...args) => console.log(kleur.yellow("üìç"), kleur.white(msg), ...args),
  network: (msg, ...args) => console.log(kleur.blue("üåê"), kleur.white(msg), ...args)
};

// ============ –§—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ============
async function saveSettings() {
  try {
    const settingsToSave = {
      baseUrl: config.baseUrl,
      checkInterval: config.checkInterval,
      locationEnabled: config.locationEnabled,
      uniqueIp: config.uniqueIp,
      randomMode: config.randomMode,
      minRandomDelay: config.minRandomDelay,
      maxRandomDelay: config.maxRandomDelay,
      proxy: {
        enabled: config.proxy.enabled,
        urls: config.proxy.urls,
        timeout: config.proxy.timeout,
        maxRetries: config.proxy.maxRetries,
        testUrl: config.proxy.testUrl
      }
    };
    await fs.writeFile(CONFIG_FILE, JSON.stringify(settingsToSave, null, 2), "utf8");
    logger.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ config.json");
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error.message);
  }
}

async function loadSettings() {
  try {
    const data = await fs.readFile(CONFIG_FILE, "utf8");
    const loaded = JSON.parse(data);
    if (loaded.baseUrl) config.baseUrl = loaded.baseUrl;
    if (typeof loaded.checkInterval === "number") config.checkInterval = loaded.checkInterval;
    if (typeof loaded.locationEnabled === "boolean") config.locationEnabled = loaded.locationEnabled;
    if (typeof loaded.uniqueIp === "boolean") config.uniqueIp = loaded.uniqueIp;
    if (typeof loaded.randomMode === "boolean") config.randomMode = loaded.randomMode;
    if (typeof loaded.minRandomDelay === "number") config.minRandomDelay = loaded.minRandomDelay;
    if (typeof loaded.maxRandomDelay === "number") config.maxRandomDelay = loaded.maxRandomDelay;
    if (loaded.proxy) {
      config.proxy.enabled = !!loaded.proxy.enabled;
      config.proxy.urls = loaded.proxy.urls || [];
      config.proxy.timeout = loaded.proxy.timeout || config.proxy.timeout;
      config.proxy.maxRetries = loaded.proxy.maxRetries || config.proxy.maxRetries;
      config.proxy.testUrl = loaded.proxy.testUrl || config.proxy.testUrl;
    }
    logger.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ config.json");
  } catch (error) {
    if (error.code === "ENOENT") {
      logger.warning("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
    } else {
      logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error.message);
    }
  }
}

// ============ –§—É–Ω–∫—Ü–∏–∏ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø—Ä–æ–∫—Å–∏ ============
async function loadTokensFromFile() {
  try {
    const content = await fs.readFile("token.txt", "utf8");
    const tokens = content.split("\n")
      .map(line => line.trim())
      .filter(line => line && !line.startsWith("#"));
    if (tokens.length === 0) {
      throw new Error("–í —Ñ–∞–π–ª–µ token.txt –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤");
    }
    config.tokens = tokens;
    logger.success(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tokens.length} —Ç–æ–∫–µ–Ω(–æ–≤) –∏–∑ token.txt`);
    return true;
  } catch (error) {
    if (error.code === "ENOENT") {
      logger.error("–§–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω");
    } else {
      logger.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è token.txt: ${error.message}`);
    }
    return false;
  }
}

async function loadProxyFromFile() {
  try {
    const proxyContent = await fs.readFile("proxy.txt", "utf8");
    const lines = proxyContent.split("\n")
      .map(line => line.trim())
      .filter(line => line);
    if (lines.length === 0) return null;
    config.proxy.urls = lines;
    return true;
  } catch (error) {
    if (error.code !== "ENOENT") {
      logger.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è proxy.txt: ${error.message}`);
    }
    return null;
  }
}

// ============ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏ ============
async function createProxyAgent() {
  if (!config.proxy.urls || config.proxy.urls.length === 0) return undefined;
  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
  const randomIndex = Math.floor(Math.random() * config.proxy.urls.length);
  const proxyUrl = config.proxy.urls[randomIndex];
  try {
    if (proxyUrl.startsWith("socks4://")) {
      return new SocksProxyAgent(proxyUrl);
    } else if (proxyUrl.startsWith("socks5://")) {
      return new SocksProxyAgent(proxyUrl);
    } else {
      return new HttpsProxyAgent(proxyUrl);
    }
  } catch (error) {
    logger.error(`Failed to create proxy agent: ${error.message}`);
    return undefined;
  }
}

async function isProxyAlive(proxyAgent) {
  try {
    const response = await fetch(config.proxy.testUrl, {
      agent: proxyAgent,
      timeout: config.proxy.timeout
    });
    return response.ok;
  } catch {
    return false;
  }
}

async function getProxyAgent(retries = config.proxy.maxRetries) {
  if (!config.proxy.enabled) return undefined;
  for (let i = 0; i < retries; i++) {
    const agent = await createProxyAgent();
    if (!agent) return undefined;
    if (await isProxyAlive(agent)) {
      logger.success("Proxy connection established");
      return agent;
    }
    logger.warning(`Proxy check failed, attempt ${i + 1}/${retries}`);
    await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)));
  }
  return undefined;
}

// ============ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ ============
async function getCurrentLocation(proxy) {
  try {
    const agent = proxy ? await getProxyAgent() : undefined;
    const response = await fetch("https://ipinfo.io/json", { agent });
    const data = await response.json();
    if (data.loc) {
      const [latitude, longitude] = data.loc.split(",").map(Number);
      return { latitude, longitude };
    }
    throw new Error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏–∏");
  } catch (error) {
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è");
    return generateRandomLocation();
  }
}

function generateRandomLocation() {
  const bounds = {
    minLat: 18.0,
    maxLat: 53.55,
    minLng: 73.66,
    maxLng: 135.05
  };
  const latitude = bounds.minLat + Math.random() * (bounds.maxLat - bounds.minLat);
  const longitude = bounds.minLng + Math.random() * (bounds.maxLng - bounds.minLng);
  return {
    latitude: Math.round(latitude * 1000000) / 1000000,
    longitude: Math.round(longitude * 1000000) / 1000000
  };
}

// ============ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ============
async function initConfig() {
  logger.info("–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...");

  await loadSettings();

  const tokensLoaded = await loadTokensFromFile();
  if (!tokensLoaded) {
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏–∑ token.txt");
  }

  const proxyFileExists = await loadProxyFromFile();
  if (proxyFileExists) {
    logger.success("–ü—Ä–æ–∫—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ proxy.txt");
    config.proxy.enabled = true;
  } else {
    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
    const question = (query) => new Promise(resolve => rl.question(query, resolve));
    const useProxy = (await question(kleur.cyan("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏? (y/n): "))).toLowerCase() === "y";
    if (useProxy) {
      config.proxy.enabled = true;
      const proxyUrl = await question(kleur.cyan("–í–≤–µ–¥–∏—Ç–µ URL –ø—Ä–æ–∫—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://user:pass@ip:port –∏–ª–∏ socks5://ip:port): "));
      config.proxy.urls = [proxyUrl.trim()];
    }
    rl.close();
  }

  const rl2 = readline.createInterface({ input: process.stdin, output: process.stdout });
  const question2 = (query) => new Promise(resolve => rl2.question(query, resolve));
  const locResp = await question2(kleur.cyan("–í–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é? (y/n): "));
  config.locationEnabled = locResp.trim().toLowerCase() === "y";
  const ipResp = await question2(kleur.cyan("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–π IP (–Ω–µ –æ–±—â–∏–π NAT)? (y/n): "));
  config.uniqueIp = ipResp.trim().toLowerCase() === "y";
  rl2.close();

  logger.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
  logger.info("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:");
  const safeConfig = { ...config, tokens: `${config.tokens.length} —Ç–æ–∫–µ–Ω(–æ–≤) –∑–∞–≥—Ä—É–∂–µ–Ω–æ` };
  console.log(kleur.gray(JSON.stringify(safeConfig, null, 2)));

  await saveSettings();
}

// ============ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ ============
function getCommonHeaders(token) {
  return {
    "Authorization": `Bearer ${token}`,
    "User-Agent": "Mozilla/5.0",
    "Accept": "application/json, text/plain, */*",
    "Accept-Language": "en-US,en;q=0.9",
    "Cache-Control": "no-cache",
    "Pragma": "no-cache",
    "Origin": "https://app.despeed.net",
    "Referer": "https://app.despeed.net/dashboard"
  };
}

// ============ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ ============
async function validateToken(token) {
  if (!token) throw new Error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
  try {
    const tokenData = JSON.parse(Buffer.from(token.split('.')[1], "base64").toString());
    if ((tokenData.exp - 90) * 1000 < Date.now()) {
      throw new Error("–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫");
    }
    const proxyAgent = await getProxyAgent();
    const profileResponse = await fetch(`${config.baseUrl}/v1/api/auth/profile`, {
      headers: getCommonHeaders(token),
      agent: proxyAgent,
      timeout: 30000
    });
    if (!profileResponse.ok) {
      throw new Error("–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
    }
    return true;
  } catch (error) {
    logger.error(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
    return false;
  }
}

// ============ –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞) ============
async function performSpeedTest() {
  try {
    logger.network("–ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–µ—Ç–∏...");
    const metadata = {
      client_name: "speed-measurementlab-net-1",
      client_session_id: crypto.randomUUID()
    };
    const proxyAgent = await getProxyAgent();
    const locateUrl = new URL("https://locate.measurementlab.net/v2/nearest/ndt/ndt7");
    locateUrl.search = new URLSearchParams(metadata).toString();
    logger.info("–ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏...");
    const locateResponse = await fetch(locateUrl, {
      agent: proxyAgent,
      timeout: 30000
    });
    if (!locateResponse.ok) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏: ${locateResponse.status}`);
    }
    const serverData = await locateResponse.json();
    if (!serverData.results || !serverData.results[0]) {
      throw new Error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏");
    }
    const server = serverData.results[0];
    logger.success(`–í—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä: ${server.machine}`);
    const downloadUrl = server.urls["wss:///ndt/v7/download"];
    const uploadUrl = server.urls["wss:///ndt/v7/upload"];

    // –¢–µ—Å—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    logger.network("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...");
    let downloadSpeed = 0;
    await new Promise((resolve) => {
      const wsOptions = config.proxy.enabled ? { agent: proxyAgent } : undefined;
      const ws = new WebSocket(downloadUrl, "net.measurementlab.ndt.v7", wsOptions);
      let startTime = Date.now();
      let totalBytes = 0;
      ws.on("open", () => {
        startTime = Date.now();
        totalBytes = 0;
      });
      ws.on("message", (data) => {
        if (typeof data === "string") return;
        totalBytes += data.length;
        const duration = (Date.now() - startTime) / 1000;
        if (duration >= 10) {
          downloadSpeed = (totalBytes * 8) / (duration * 1000000);
          ws.close();
        }
      });
      ws.on("close", () => {
        logger.speed(`–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: ${downloadSpeed.toFixed(2)} Mbps`);
        resolve();
      });
      ws.on("error", (error) => {
        logger.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${error.message}`);
        resolve();
      });
    });

    // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    logger.network("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏...");
    let uploadSpeed = 0;
    await new Promise((resolve) => {
      const wsOptions = config.proxy.enabled ? { agent: proxyAgent } : undefined;
      const ws = new WebSocket(uploadUrl, "net.measurementlab.ndt.v7", wsOptions);
      let startTime = null;
      let totalBytes = 0;
      let uploadInterval = null;
      const chunkSize = 16384;
      const uploadData = Buffer.alloc(chunkSize);
      crypto.randomFillSync(uploadData);
      ws.on("open", () => {
        startTime = Date.now();
        totalBytes = 0;
        uploadInterval = setInterval(() => {
          if (ws.readyState === WebSocket.OPEN) {
            const duration = (Date.now() - startTime) / 1000;
            if (duration >= 10) {
              uploadSpeed = (totalBytes * 8) / (duration * 1000000);
              clearInterval(uploadInterval);
              ws.close();
              return;
            }
            if (ws.bufferedAmount < 1024 * 1024) {
              ws.send(uploadData);
              totalBytes += uploadData.length;
            }
          }
        }, 1);
      });
      ws.on("close", () => {
        if (uploadInterval) clearInterval(uploadInterval);
        if (uploadSpeed === 0 && startTime && totalBytes > 0) {
          const duration = (Date.now() - startTime) / 1000;
          uploadSpeed = (totalBytes * 8) / (duration * 1000000);
        }
        logger.speed(`–ó–∞–≥—Ä—É–∑–∫–∞: ${uploadSpeed.toFixed(2)} Mbps`);
        resolve();
      });
      ws.on("error", (error) => {
        if (uploadInterval) clearInterval(uploadInterval);
        logger.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
        resolve();
      });
      setTimeout(() => {
        if (uploadInterval) clearInterval(uploadInterval);
        if (ws.readyState === WebSocket.OPEN) ws.close();
      }, 15000);
    });

    return { downloadSpeed, uploadSpeed };
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏: ${error.message}`);
    return { downloadSpeed: 0, uploadSpeed: 0 };
  }
}

// ============ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ä–∞—Å—á—ë—Ç –Ω–∞–≥—Ä–∞–¥—ã ============
async function reportResults(token, downloadSpeed, uploadSpeed, location) {
  try {
    logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞...");
    const baseReward = 50;
    let multiplier = 1;
    if (config.locationEnabled && config.uniqueIp) {
      multiplier = 4;
    } else if (config.locationEnabled || config.uniqueIp) {
      multiplier = 2;
    }
    const reward = baseReward * multiplier;
    const body = JSON.stringify({
      download_speed: Math.round(downloadSpeed * 100) / 100,
      upload_speed: Math.round(uploadSpeed * 100) / 100,
      latitude: location.latitude,
      longitude: location.longitude,
      timestamp: new Date().toISOString(),
      base_reward: baseReward,
      multiplier,
      reward
    });
    const proxyAgent = await getProxyAgent();
    const response = await fetch(`${config.baseUrl}/v1/api/points`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        ...getCommonHeaders(token)
      },
      agent: proxyAgent,
      timeout: 30000,
      body
    });
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${response.status}`);
    }
    const data = await response.json();
    if (data.success) {
      logger.success("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
      logger.info("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", JSON.stringify(data));
      return data;
    } else {
      throw new Error(data.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤");
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error.message}`);
    return null;
  }
}

// ============ –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ ============
async function displayAccountInfo(token) {
  try {
    logger.info("\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ ===");
    const proxyAgent = await getProxyAgent();
    const profileResponse = await fetch(`${config.baseUrl}/v1/api/auth/profile`, {
      headers: getCommonHeaders(token),
      agent: proxyAgent,
      timeout: 30000
    });
    if (profileResponse.ok) {
      const profile = await profileResponse.json();
      logger.info(`–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${profile.data.username || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}`);
      logger.info(`Email: ${profile.data.email || "–ù–µ —É–∫–∞–∑–∞–Ω"}`);
    }
    logger.info("=== ==================== ===\n");
  } catch (error) {
    logger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: ${error.message}`);
  }
}

// ============ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ============
async function processAccount(token, accountIndex) {
  try {
    logger.info(`\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountIndex + 1} ===`);
    logger.time(`–í—Ä–µ–º—è: ${new Date().toLocaleString()}`);
    const isValid = await validateToken(token);
    if (!isValid) {
      logger.error(`–¢–æ–∫–µ–Ω ${accountIndex + 1} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫`);
      return false;
    }
    logger.success(`–¢–æ–∫–µ–Ω ${accountIndex + 1} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É`);
    await displayAccountInfo(token);
    let location;
    if (config.locationEnabled) {
      location = await getCurrentLocation();
    } else {
      location = generateRandomLocation();
    }
    logger.location(`–õ–æ–∫–∞—Ü–∏—è —Ç–µ—Å—Ç–∞: ${location.latitude}, ${location.longitude}`);
    logger.network("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏...");
    const { downloadSpeed, uploadSpeed } = await performSpeedTest();
    logger.speed(`–ò—Ç–æ–≥–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${downloadSpeed.toFixed(2)} Mbps`);
    logger.speed(`–ò—Ç–æ–≥–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadSpeed.toFixed(2)} Mbps`);
    const result = await reportResults(token, downloadSpeed, uploadSpeed, location);
    if (result && result.success) {
      logger.success("–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
      return true;
    } else {
      logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞");
      if (result && result.message) {
        logger.error(`–ü—Ä–∏—á–∏–Ω–∞: ${result.message}`);
      }
      return false;
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ ${accountIndex + 1}: ${error.message}`);
    return false;
  }
}

// ============ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª (–æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥) ============
async function main() {
  try {
    logger.info("\n=== –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ–ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ ===");
    for (let i = 0; i < config.tokens.length; i++) {
      await processAccount(config.tokens[i], i);
      if (i < config.tokens.length - 1) {
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º...");
        await new Promise(resolve => setTimeout(resolve, 30000));
      }
    }
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: ${error.message}`);
  } finally {
    if (!autoModeEnabled) {
      const nextTime = new Date(Date.now() + config.checkInterval);
      logger.time(`–°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${nextTime.toLocaleString()}`);
      logger.info(`–ò–Ω—Ç–µ—Ä–≤–∞–ª: ${Math.round(config.checkInterval / 60000)} –º–∏–Ω—É—Ç`);
      logger.info("=== –¶–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à—ë–Ω ===\n");
      setTimeout(main, config.checkInterval);
    }
  }
}

// ============ –ú–µ–Ω—é –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ============
function askQuestion(query) {
  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  return new Promise(resolve => rl.question(query, ans => {
    rl.close();
    resolve(ans);
  }));
}

function showMenu() {
  console.log(kleur.cyan("\n=== –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é ==="));
  console.log("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏");
  console.log("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º");
  console.log("3. –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç (—Ç–æ–∫–µ–Ω)");
  console.log("4. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏");
  console.log("5. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
  console.log("6. –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
  console.log("7. –í—ã—Ö–æ–¥");
  console.log("======================\n");
}

async function handleMenuSelection() {
  showMenu();
  const choice = await askQuestion(kleur.cyan("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: "));
  switch (choice.trim()) {
    case "1":
      await main();
      break;
    case "2":
      autoModeEnabled = true;
      await autoMode();
      return;
    case "3":
      await addAccount();
      break;
    case "4":
      await addProxy();
      break;
    case "5":
      showSettings();
      break;
    case "6":
      await editSettings();
      break;
    case "7":
      console.log(kleur.yellow("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã..."));
      process.exit(0);
      break;
    default:
      console.log(kleur.red("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."));
  }
  await handleMenuSelection();
}

async function addAccount() {
  const token = await askQuestion(kleur.cyan("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω: "));
  if (token.trim() !== "") {
    config.tokens.push(token.trim());
    await fs.writeFile("token.txt", config.tokens.join("\n"), "utf8");
    console.log(kleur.green("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"));
    await saveSettings();
  } else {
    console.log(kleur.red("–ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω."));
  }
}

async function addProxy() {
  const proxyInput = await askQuestion(kleur.cyan("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ (–∫–∞–∂–¥—ã–π URL —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏): "));
  const proxies = proxyInput.split("\n").map(line => line.trim()).filter(line => line);
  if (proxies.length > 0) {
    config.proxy.urls = proxies;
    config.proxy.enabled = true;
    await fs.writeFile("proxy.txt", proxies.join("\n"), "utf8");
    console.log(kleur.green("–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!"));
    await saveSettings();
  } else {
    console.log(kleur.red("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü—Ä–æ–∫—Å–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."));
  }
}

function showSettings() {
  console.log(kleur.gray("\n=== –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ==="));
  console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${config.tokens.length}`);
  if (config.proxy.enabled && config.proxy.urls.length > 0) {
    console.log("–ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω—ã, —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏:");
    config.proxy.urls.forEach((url, idx) => {
      console.log(`  ${idx + 1}. ${url}`);
    });
  } else {
    console.log("–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã");
  }
  console.log(`–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: ${config.locationEnabled ? "–í–∫–ª—é—á–µ–Ω–∞" : "–û—Ç–∫–ª—é—á–µ–Ω–∞"}`);
  console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã–π IP: ${config.uniqueIp ? "–î–∞" : "–ù–µ—Ç"}`);
  if (config.randomMode) {
    console.log(`–†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ–∂–∏–º: –í–∫–ª—é—á—ë–Ω (–∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç ${Math.round(config.minRandomDelay / 60000)} –¥–æ ${Math.round(config.maxRandomDelay / 60000)} –º–∏–Ω—É—Ç)`);
  } else {
    console.log(`–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏: ${Math.round(config.checkInterval / 60000)} –º–∏–Ω—É—Ç`);
  }
  console.log("========================\n");
}

async function editSettings() {
  logger.info("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...");
  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  const question = (query) => new Promise(resolve => rl.question(query, resolve));

  const baseUrl = await question(`–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π URL (—Ç–µ–∫—É—â–∏–π: ${config.baseUrl}): `);
  if (baseUrl.trim()) config.baseUrl = baseUrl.trim();

  const intervalStr = await question(`–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö, —Ç–µ–∫—É—â–∏–π: ${Math.round(config.checkInterval / 60000)}): `);
  let intervalMinutes = parseInt(intervalStr);
  const maxMinutes = 1440;
  if (isNaN(intervalMinutes) || intervalMinutes <= 0) {
    intervalMinutes = Math.round(config.checkInterval / 60000);
  } else if (intervalMinutes > maxMinutes) {
    console.log(kleur.yellow(`–ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ (${maxMinutes} –º–∏–Ω—É—Ç). –ò—Å–ø–æ–ª—å–∑—É–µ–º ${maxMinutes} –º–∏–Ω—É—Ç.`));
    intervalMinutes = maxMinutes;
  }
  config.checkInterval = intervalMinutes * 60000;

  const loc = await question(`–í–∫–ª—é—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é? (y/n, —Ç–µ–∫—É—â–∏–π: ${config.locationEnabled ? "y" : "n"}): `);
  config.locationEnabled = (loc.trim().toLowerCase() === "y");

  const unique = await question(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–π IP? (y/n, —Ç–µ–∫—É—â–∏–π: ${config.uniqueIp ? "y" : "n"}): `);
  config.uniqueIp = (unique.trim().toLowerCase() === "y");

  const randMode = await question(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏? (y/n, —Ç–µ–∫—É—â–∏–π: ${config.randomMode ? "y" : "n"}): `);
  config.randomMode = (randMode.trim().toLowerCase() === "y");
  if (config.randomMode) {
    const minDelayStr = await question(`–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–≤ –º–∏–Ω—É—Ç–∞—Ö, —Ç–µ–∫—É—â–∞—è: ${Math.round(config.minRandomDelay / 60000)}): `);
    const maxDelayStr = await question(`–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–≤ –º–∏–Ω—É—Ç–∞—Ö, —Ç–µ–∫—É—â–∞—è: ${Math.round(config.maxRandomDelay / 60000)}): `);
    const minDelay = parseInt(minDelayStr) || Math.round(config.minRandomDelay / 60000);
    const maxDelay = parseInt(maxDelayStr) || Math.round(config.maxRandomDelay / 60000);
    if (minDelay > maxDelay) {
      console.log(kleur.red("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π. –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã."));
    } else {
      config.minRandomDelay = minDelay * 60000;
      config.maxRandomDelay = maxDelay * 60000;
    }
  }

  const useProxy = await question(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏? (y/n, —Ç–µ–∫—É—â–∏–π: ${config.proxy.enabled ? "y" : "n"}): `);
  config.proxy.enabled = (useProxy.trim().toLowerCase() === "y");
  if (config.proxy.enabled) {
    if (config.proxy.urls.length > 0) {
      console.log(kleur.gray("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–∫—Å–∏:"));
      config.proxy.urls.forEach((url, idx) => {
        console.log(`  ${idx + 1}. ${url}`);
      });
      const choice = await question(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞: `);
      if (choice.trim()) {
        const indices = choice.split(",")
          .map(s => parseInt(s.trim()) - 1)
          .filter(index => index >= 0 && index < config.proxy.urls.length);
        if (indices.length > 0) {
          config.proxy.urls = indices.map(index => config.proxy.urls[index]);
          console.log(kleur.green("–í—ã–±—Ä–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–∫—Å–∏:"), config.proxy.urls.join(", "));
        } else {
          console.log(kleur.red("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."));
        }
      } else {
        console.log(kleur.green("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."));
      }
    } else {
      const proxyUrl = await question(`–í–≤–µ–¥–∏—Ç–µ URL –ø—Ä–æ–∫—Å–∏: `);
      if (proxyUrl.trim()) {
        config.proxy.urls = [proxyUrl.trim()];
      }
    }
    const proxyTimeout = await question(`–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ–∫—Å–∏ (–º—Å, —Ç–µ–∫—É—â–∏–π: ${config.proxy.timeout}): `);
    config.proxy.timeout = parseInt(proxyTimeout) || config.proxy.timeout;
    const proxyRetries = await question(`–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–∫—Å–∏ (—Ç–µ–∫—É—â–∏–π: ${config.proxy.maxRetries}): `);
    config.proxy.maxRetries = parseInt(proxyRetries) || config.proxy.maxRetries;
    const proxyTestUrl = await question(`–í–≤–µ–¥–∏—Ç–µ test URL –¥–ª—è –ø—Ä–æ–∫—Å–∏ (—Ç–µ–∫—É—â–∏–π: ${config.proxy.testUrl}): `);
    if (proxyTestUrl.trim()) config.proxy.testUrl = proxyTestUrl.trim();
  }
  rl.close();
  logger.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
  showSettings();
  await saveSettings();
}

async function autoMode() {
  const intervalStr = await askQuestion(kleur.cyan("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ü–∏–∫–ª–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö): "));
  let intervalMinutes = parseInt(intervalStr) || 60;
  const maxMinutes = 1440;
  if (intervalMinutes > maxMinutes) {
    console.log(kleur.yellow(`–ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ (${maxMinutes} –º–∏–Ω—É—Ç). –ò—Å–ø–æ–ª—å–∑—É–µ–º ${maxMinutes} –º–∏–Ω—É—Ç.`));
    intervalMinutes = maxMinutes;
  }
  // –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–∂–∏–º, –≤—ã–±–∏—Ä–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
  let delay;
  if (config.randomMode) {
    delay = Math.floor(Math.random() * (config.maxRandomDelay - config.minRandomDelay + 1)) + config.minRandomDelay;
    console.log(kleur.green(`–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: ${Math.round(delay / 60000)} –º–∏–Ω—É—Ç.`));
  } else {
    delay = intervalMinutes * 60000;
  }
  config.checkInterval = delay;
  logger.info(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º ${Math.round(delay / 60000)} –º–∏–Ω—É—Ç.`);
  autoModeEnabled = true;
  while (true) {
    await main();
    await new Promise(resolve => setTimeout(resolve, config.checkInterval));
  }
}

process.on("SIGINT", () => {
  logger.warning("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –í—ã—Ö–æ–¥...");
  process.exit(0);
});

process.on("SIGTERM", () => {
  logger.warning("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –í—ã—Ö–æ–¥...");
  process.exit(0);
});

console.clear();
console.log(kleur.cyan(banner));
logger.info("–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –º–Ω–æ–≥–æ–ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ (DeSpeed)...");
initConfig()
  .then(() => {
    handleMenuSelection();
  })
  .catch((error) => {
    logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    process.exit(1);
  });
